name: Judgment
includes:
  - token.h
  - type.h
  - shape.h
  - naming.h
  - metavar.h
  - string
  - vector
usings:
  shape_naming: std::pair<shape, naming>
  judgments: std::vector<judgment>
  ForwardRenaming: std::unordered_map<token, metavar>
members:
  shp: shape
  nam: naming
unique_index: lookup_by_shp_nam
properties:
  shp_nam:
    type: shape_naming
    body: "{ return std::make_pair(shp, nam); }"
  flattened:
    type: shape
    body: >-
      {
        std::vector<token> rv(shp->shp);
        int x = 0;
        bool first = true;
        for(auto& s : rv) {
          if(first) {
            first = false;
            continue;
          }
          if(s->typ) {
            uint8_t i = nam->map[x++];
            s = s->typ->mvs[i]->tok;
          }
        }
        return Shape::get_or_create(rv);
      }
lookups:
  lookup_by_shape:
    type: shape
    getter: shp
  lookup_by_naming:
    type: naming
    getter: nam
  lookup_by_shp_nam:
    type: shape_naming
    getter: shp_nam()
    unique: true
extra: >-
  inline static judgment create(const shape_naming& shp_nam) {
    return create(shp_nam.first, shp_nam.second);
  }

  static judgment get_or_create(const std::vector<std::string>& ss, const ForwardRenaming& r) {
    std::vector<token> tokens;
    for(const auto& s: ss) {
      tokens.push_back(Token::get_or_create(s));
    }
    return get_or_create(tokens, r);
  }

  inline static judgment get_or_create(std::vector<token> cs) {
    return get_or_create(cs, {});
  }

  inline static judgment get_or_create(const std::vector<std::string>& ss) {
    return get_or_create(ss, {});
  }

  static judgment get_or_create(std::vector<token> cs, const ForwardRenaming& r) {
    mapping map;
    for (token &t : cs) {
      if(t->var_typ) {
        map.push_back(r.at(t));
        t = r.at(t)->tok;
      } else if(t->mv) {
        map.push_back(t->mv->i);
        t = t->mv->typ->tok;
      } else if(r.find(t) != r.end()) {
        map.push_back(r.at(t)->i);
        t = r.at(t)->typ->tok;
      }
    }
    shape shp = Shape::get_or_create(cs);
    naming nam = Naming::get_or_create(map);
    return get_or_create(std::make_pair(shp, nam));
  }
