name: Token
includes:
  - vector
  - metavar_ptr.h
  - type.h
members:
  s: std::string
mutable:
  mv: metavar
  typ: type
  var_typ: type
unique_index: lookup_by_s
lookups:
  lookup_by_s:
    getter: s
    type: std::string
    unique: true
to_ostream:
  return os << t->s;
properties:
  as_type:
    type: type
    body: >-
      if(!typ) {
        typ = Type::get_or_create(this - TokenIndex::all_Tokens.data());
      }
      return typ;
post_create: >-
  auto pos = t->s.find('$');
  if(pos != std::string::npos) {
    token typ_token = TokenIndex::lookup_by_s(t->s.substr(0, pos));
    type typ = typ_token->as_type();
    if (MetavarIndex::lookup_by_typ_index.count(typ) == 0) {

      typ_token->typ = typ;
      uint8_t i = std::stoi(t->s.substr(pos + 1, t->s.size() - pos - 1));

      std::cout << "creating metavars from " << t << " " << typ << std::endl;
      for(int j = 0; j < 16; j++) {
        metavar mv = Metavar::create(j, typ);
        typ->mvs.push_back(mv);
        if(j == i) continue;
        mv->tok = Token::get_or_create(typ_token->s + "$" + std::to_string(j));
        mv->tok->mv = mv;
      }
      t->mv = MetavarIndex::lookup_by_typ_i(std::make_pair(typ, i));
      t->mv->tok = t;
    }
  }
