name: Judgment
includes:
  - token.h
members:
  cs: std::vector<token>
  s: shape
  n: naming
properties:
  type:
    type: token
    body: "{ if(cs.size() > 0) return cs[0]; else return token(); }"
unique_index: lookup_by_cs
lookups:
  lookup_by_shape:
    type: shape
    getter: s
  lookup_by_naming:
    type: naming
    getter: n
  lookup_by_cs:
    type: std::vector<token>
    getter: cs
    unique: true
  lookup_by_type:
    type: token
    getter: type()
  lookup_by_token:
    type: token
    getter: cs
    iterable: true
extra: >-
  judgment get_or_create(std::vector<std::string> ss) {
    std::vector<token> ts;
    for(const auto& s: ss) {
      ts.push_back(Token::get_or_create(s));
    }
    return get_or_create(ts);
  }
