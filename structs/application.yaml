name: Application
includes:
  - rule.h
  - judgment.h
  - token.h
  - list
  - vector
  - unordered_map
members:
  via: rule
  args: std::unordered_map<token, std::vector<application>>
  conditions: std::unordered_map<token, std::vector<application>>
  result: judgment
unique_index: lookup_by_hypothesis
properties:
  hypothesis_or_empty:
    type: judgment
    body: "{ if(via) return 0;
             else return result; }"
lookups:
  lookup_by_rule:
    type: rule
    getter: via
  lookup_by_result:
    type: judgment
    getter: result
  lookup_by_hypothesis:
    type: judgment
    getter: hypothesis_or_empty()
    unique: true
extra: >-

  Application(judgment j)
   : via(0), result(j) { }

  inline static application get_or_create_hypothesis(judgment j) {
    return get_or_create(j);
  }
  static application create(judgment j) {
    return create(rule(), {}, j, {});
  }
  std::unordered_set<judgment> assumptions() const {
    std::unordered_set<judgment> rv;
    for(const auto& [type, conditions_of_type]: conditions) {
      for(const auto& c: conditions_of_type) {
        if(!c->via && c->conditions.size() == 0) continue;
        const auto& c_assumptions = c.assumptions();
        rv.insert(c_assumptions.begin(); c_assumptions.end());
      }
    }
    return rv;
  }
